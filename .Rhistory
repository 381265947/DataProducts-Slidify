hello
m <- rbind([1, 0, 0], [0, 1, 0], [0, 0, 1])
?rbind
m <- rbind(c(1, 0, 0), c(0, 1, 0), c(0, 0, 1)
)
m
solve(m)
m <- rbind(c(4, 3), c(3, 2))
m
solve(m)
## Put comments here that give an overall description of what your
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(m = matrix()) {
matrix <- m
inverseCache <- NULL
getMatrix <- function() matrix
getInverse <- function() inverseCache
setInverse <- function(inverse) inverseCache <<- inverse
list(getMatrix = getMatrix, getInverse = getInverse, setInverse = setInverse)
}
## Write a short comment describing this function
cacheSolve <- function(m, ...) {
inverse <- m$getInverse()
if(!is.null(inverse)){
message("returning cached inverse")
return(inverse)
}
message("computing inverse")
matrix <- m$getMatrix()
result <- solve(matrix)
m$setInverse(result)
result
}
m
x <- makeCacheMatrix(m)
r <- cacheSolve(x)
r
r <- cacheSolve(x)
r
r <- cacheSolve(x)
library(xlsx)
require(xlsx)
read.xlsx("hello.xlsx")
read.xlsx("hello.xlsx", 1)
,
qt(.975, df = 39)
qt(.975, df = 999)
ToothGrowth
summary(ToothGrowth)
data <- ToothGrowth
factors(data$supp)
factor(data$supp)
levels(data$supp)
data <- mtcars
names(data)
head(data)
?mtcars
fit <- lm(mpg ~ ., autoData)
summary(fit)
data <- mtcars
autoData <- data[data$am == 0,]
manData <- data[data$am == 1,]
fit <- lm(mpg ~ ., autoData)
summary(fit)
fit2 <- lm(mpg ~ factor(cyl) + disp + qsec + factor(carb))
fit2 <- lm(mpg ~ factor(cyl) + disp + qsec + factor(carb), autoData)
summary(fit2)
?plot
xyplot(mpg ~ data[,i], data = data, groups = am, col=c("blue", "red"))
data <- mtcars
fit <- lm(mpg ~ ., data)
summary(fit)
autoData <- data[data$am == "0",]
fit <- lm(mpg ~ ., autoData)
summary(fit)
manData <- data[data$am == "1",]
fit2 <- lm(mpg ~ manData)
fit2 <- lm(mpg ~ ., data = manData)
anova(fit, fit2)
summary(fit2)
dim(data)
data
autoData
manData
fit2 <- lm(mpg ~ . - am, data = manData)
summary(fit2)
fit1 <- lm(mpg ~ . - am, autoData)
anova(fit1, fit2)
anova(fit2, fit1)
dim(fit2)
dim(autoData)
dim(manData)
fit3 <- lm(mp3 ~ . - am, autoData[1:13,])
fit3 <- lm(mpg ~ . - am, autoData[1:13,])
anova(fit3, fit2)
meanA <- mean(autoData)
meanA <- mean(autoData$mpg)
sdA <- sd(autoData$mpg)
meanM <- mean(manData$mpg)
sdM <- sd(manData$mpg)
c(meanA, sdA, meanM, sdM)
t.test(autoData$mpg, manData$mpg)
summary(lm(mpg ~ . - am, autoData))
for(i in 1:20){}
for(i in 1:20){}
for(i in 1:20){
}
sapply(1:20, function (x) c(100* x + x, 100 * x, x))
m <- sapply(1:20, function (x) c(100* x + x, 100 * x, x))
t(m)
m <- t(m)
m
colnames(m) <- c(y, a, b)
colnames(m) <- c("y", "a", "b")
m
f <- fit(y ~ a + b, m)
f <- lm(y ~ a + b, m)
f <- lm(y ~ a + b, data.frame(m)
)
f
m <- t(sapply(1:20, function (x) c(y = 100* x + (x + 1), a = 100 * x, b = (x + 1))))
m
f <- lm(y ~ a + b, data.frame(m))
f
m <- t(sapply(1:20, function (x) c(y = 100* x * (x + 1), a = 100 * x, b = (x + 1))))
f <- lm(y ~ a + b, data.frame(m))
f
m
m <- t(sapply(1:20, function (x){ a = 100 * x; b = 1.5 * a; y = a + b; c(y, a, b) }))
f <- lm(y ~ a + b, data.frame(m))
m
m <- t(sapply(1:20, function (x){ a = 100 * x; b = 1.5 * a; y = a + b; c(y=y, a=a, b=b) }))
f <- lm(y ~ a + b, data.frame(m))
f
summary(fit)
f <- lm(y ~ ., data.frame(m))
f
jitter(1)
jitter(100)
m <- t(sapply(1:20, function (x){ a = 100 * x; b = 1.5 * jitter(a); y = a + b; c(y=y, a=a, b=b) }))
f <- lm(y ~ ., data.frame(m))
f
m
m <- t(sapply(1:20, function (x){ a = 100 * x; b = 1.5 * jitter(x); y = a + b; c(y=y, a=a, b=b) }))
f <- lm(y ~ ., data.frame(m))
f
m <- t(sapply(1:20, function (x){ a = 100 * x; b = 1.5 * jitter(x); c = b / a; y = a + b; c(y=y, a=a, b=b, c=c) }))
m <- t(sapply(1:20, function (x){ a = 100 * x; b = 1.5 * jitter(x); c = b / a; y = a + b + c; c(y=y, a=a, b=b, c=c) }))
f <- lm(y ~ ., data.frame(m))
f
summary(fit)
cor(data$mpg, data$am)
lm(mpg ~ . - 1, data)
summary(lm(mpg ~ . - 1, data))
summary(lm(mpg ~ . - 1, autoData))
summary(lm(mpg ~ . - am - 1, autoData))
summary(lm(mpg ~ . - am - 1, manData))
cor(data$am, data$carb)
cor(data$am, data$gear)
cor(autoData$am, autoData$carb)
cor(autoData$mpg, autoData$gear)
cor(autoData$mpg, autoData$carb)
cor(manData$mpg, manData$carb)
cor(manData$mpg, manData$gear)
summary(lm(am ~ . - 1, data))
plot(data$mpg ~ .)
plot(data$mpg ~ ., data=data)
fit <- lm(am ~ mpg)
fit <- lm(am ~ mpg, data)
fit
fit <- lm(am ~ mpg - 1, data)
fit
fit <- lm(am ~ cyl * mpg - 1, data)
fit <- lm(am ~ cyl * mpg * disp * hp * drat * wt * qsec * vs * am * gear * carb - 1, data)
fit <- lm(am ~ cyl * mpg * disp * hp * drat * wt * qsec * vs * gear * carb - 1, data)
fit
fit <- lm(am ~ cyl * mpg * disp * hp * drat * wt * qsec - 1, data)
fit
class(data$cyl)
data$cyl <- factor(data$cyl)
data$vs <- factor(data$vs)
data$am <- factor(data$am)
data$gear <- factor(data$gear)
data$carb <- factor(data$carb)
class(data$cyl)
fit <- lm(am ~ cyl * mpg * disp * hp * drat * wt * qsec - 1, data)
fit <- lm(am ~ mpg * disp * hp * drat * wt * qsec - 1, data)
fi
fit
fit <- lm(am ~ . - 1, data)
fit
summary(fit)
fit <- lm(am ~ mpg - 1, data)
fit <- lm(am ~ cyl - 1, data)
fit <- lm(mpg ~ disp * hp * drat * wt * qsec - 1, data)
summary(fit)
fit <- lm(mpg ~ disp | hp | drat | wt | qsec - 1, data)
summary(fit)
fit <- lm(mpg ~ disp | hp | drat | wt | qsec, data)
summary(fit)
fit <- lm(mpg ~ disp * hp * drat * wt * qsec, data)
summary(fitr)
summary(fit)
fit <- lm(mpg ~ disp * hp * drat * wt * qsec - 1, data)
summary(fit)
fit <- lm(mpg ~ cyl * disp * hp * drat * wt * qsec - 1, data)
summary(fit)
?mtcars
corr(data$hp, data$qsec)
cor(data$hp, data$qsec)
cor(autoData$hp, autoData$qsec)
cor(manData$hp, manData$qsec)
cor(manData$wt, manData$disp)
cor(autoData$wt, autoData$disp)
corr(data$am, data$wt)
cor(data$am, data$wt)
cor(data$wt, data$am)
cor(data$wt, as.numeric(data$am))
cor(data$wt, data$mpg)
summary(lm(mpg ~ . - 1, data))
cor(data$wt, data$hp)
cor(data$gear, data$am)
cor(data$gear, data$cyl)
summary(lm(mpg ~ . - 1, autoData))
summary(lm(mpg ~ . - 1, manData))
manData$am
summary(lm(mpg ~ ., manData))
summary(lm(mpg ~ ., autoData))
cor(data$disp, data$qsec)
cor(manData$disp, manData$qsec)
cor(autoData$disp, autoData$qsec)
t.test(data$mpg, data$am)
data <- mtcars
t.test(data$mpg, data$am)
autoData <- data[data$am == "0",]
manData <- data[data$am == "1",]
t.test(autoData$mpg, manData$mpg)
t.test(autoData$mpg, manData$mpg)#coefficients
t.test(autoData$mpg, manData$mpg)$coef
t.test(autoData$mpg, manData$mpg)$coefficients
t.test(autoData$mpg, manData$mpg)$means
t.test(autoData$mpg, manData$mpg)$mean
class(t.test(autoData$mpg, manData$mpg))
t.test(autoData$mpg, manData$mpg)[1]
t.test(autoData$mpg, manData$mpg)[2]
t.test(autoData$mpg, manData$mpg)[3]
t.test(autoData$mpg, manData$mpg)[]
t.test(autoData$mpg, manData$mpg)[4]
t.test(autoData$mpg, manData$mpg)[4]$conf.int
t.test(autoData$mpg, manData$mpg)[[4]]$conf.int
t.test(autoData$mpg, manData$mpg)[4]
t.test(autoData$mpg, manData$mpg)[5]
summary(fit(mpg ~ . - 1, data))
summary(lm(mpg ~ . - 1, data))
lm(mpg ~ . - 1, autoData)$coefs
lm(mpg ~ . - 1, autoData)$coefficients
summary(lm(mpg ~ . - 1, data))$coefficients
summary(lm(mpg ~ am * wt, mtcars))
summary(lm(mpg ~ am * wt - 1, mtcars))
lm(mpg ~ am * wt - 1, mtcars)$coefficients
summary(lm(mpg ~ am * wt - 1, mtcars))[5]
summary(lm(mpg ~ am * wt - 1, mtcars))[4]
summary(lm(mpg ~ . - 1, autoData))
setwd("c:/m/coursera//data products/project2/")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('ramnathv/slidifyLibraries')
library(slidify)
author("data-products-project")
slidify('index.Rmd')
library(knitr)
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
publish(user = "381265947", repo = "DataProducts-Slidify
")
publish(user = "381265947", repo = "DataProducts-Slidify")
